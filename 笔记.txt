屏幕适配 方案一

当 small width 
values-sw

anr : application not response
如果在主线程中， Activity的执行时间超过五秒，可能造成卡顿

安卓开发的原则: 主线程不能又任何的卡顿
所以耗时操作要放到子线程里面执行

Android中的UI线程模型
UI： user Interface
在Android系统中，主线程用于处理UI相关的操作，包括：创建控件，更新空间内容显示，所以在安卓系统中
主线程也称为UI线程，也就是说只能在主线程中创建空间(findViewById)和更新空间内容
从一般的结论上说，子线程是不允许更新UI操作的，否则会抛出异常
解决方法
1.在runOnUiThread


进程通信
handler 

完成随机点名系统， 使用Handler消息机制完成
1.点击开始按钮，开始按钮禁用，暂停按钮启用
2.程序启动时，开始按钮启用，暂停按钮禁用
3.每50毫秒，随机抽取每一位同学的信息显示到控件
4.点击暂停
进程与线程：Process&Thread
----------------------------------------
进程:进程通俗的表现为正在运行(进行中)的程序。

进程是应用程序从准备开始执行,到操作系统申请硬件资源(CPU、内存、硬盘),到开始执行,到执行结束的整个过程。

进程的特征：多个程序可以“同时”执行,本质上是这些进程高频率切换执行,且具有随机性。即:CPU切换到每个进程，执行该进程的时间是随机的。


线程:进程是线程的容器,每个进程在启动时,都会默认开启一个线程,这个线程称之为主线程.

在程序执行的过程中,开发者可以另外创建并开启更多的线程,这些线程称之为子线程/工作线程.


创建并且启动线程
-----------------------------------
【方式一】
自定义类,继承自java.lang.Thread,并重写public void run()方法,然后创建该线程类的对象,调用线程对象的start()方法.


【方式二】
自定义类,实现java.lang.Runnable接口,并重写public void run()方法,创建该自定义类的对象,创建一个线程类,将实现Runnable自定类的对象当做参数传入Thread类,然后调用Thread类的对象的start()方法.


任务一：
-------------------------------------------
新建一个Android项目Timer,MainActivity中放一个TextView,显示时钟效果,如果没有学过Android线程通讯,会卡死.



ANR
---------------------------------------------------
ANR:Application Not Responding
应用程序无响应,导致ANR的唯一原因,主线程执行的任务消耗时间过长!

如果在主线程中,Activity的执行时间超过5s,有可能导致ANR.

【开发者的原则】
任何卡顿都是不可以接受的,不能在主线程中执行任何耗时操作,哪怕只有0.1s.



Android中的UI线程模型
---------------------------------
UI:User Interface 
在Android系统中,主线程用于处理UI相关的操作,包括:创建控件,更新控件内容显示.....所以在Android系统中,主线程也称之为UI线程.
从一般的结论上说,子线程是不允许更新UI操作的,否则会导致android.view.ViewRootImpl$CalledFromWrongThreadException: Only the original thread that created a view hierarchy can touch its views.
也就是说只有主线程可以更新UI.

【小结】
 主线程不允许执行耗时操作,子线程不能更新UI!


解决子线程更新UI的操作
----------------------------
1.入门推荐,开发者不适用
  runOnUiThread(new Runnable() {
 @Override
 public void run() {
        //子线程更新UI代码写在run方法中                
  }
});


Android中的消息机制
---------------------------------------------
在Android系统中,使用消息机制实现线程间的通信。
实现方案就是：当子线程在执行耗时任务时,或者执行完耗时任务操作以后,如果需要更新UI,可以将主线程需要的数据发送给主线程,主线程接受到消息以后,对UI进行更新


消息机制中的角色
---------------------------------------------
Message:消息,数据的载体,用于封装主线程需要的数据,例如更新进度条的进度,或者任务完成时,可以封装更新UI所必须的数据.

Handler:消息的发送者和处理者,该类可以实现消息的发送和处理.


Message类
---------------------------------------------
--int arg1:用于封装int类型的数据
--int arg2:同上
--Object obj:用于封装Object(任意类型)的数据
--int what:用于标识消息的类型,通常使用静态常量,通过常量的名称表示具体的含义

【方法】
-- Message obtain()-->从消息池(Message Pool)消息池中获取Message对象,消息池的大小为50.

-- void sendToTarget()-->将消息发送给目标Handler对象,使用该方法的前提是调用了Message的obtain()方法并指定了Handler对象

不推new Message()对象.


【作业】
完成随机点名系统,使用Handler消息机制完成.
1.程序启动时,开始按钮启用,暂停按钮禁用.
2.点击开始按钮后,开始按钮禁用,暂停按钮启用.
3.每50毫秒随机抽取一位同学的信息显示到控件
4.点击暂停按钮后,缓慢停止,最后随机抽取一位同学,开启按钮启用
  




